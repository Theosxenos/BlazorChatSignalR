@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?"/>
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <div id="textarea" @ref="TextAreaRef">
        @foreach(var msg in messages)
        {
            // System message
            @if(string.IsNullOrEmpty(msg.Item1))
            {
                <span class="system">@msg.Item2</span>
            }
            else
            {
                <span class="message">
                    <span class="user">@msg.Item1</span>@msg.Item2
                </span>
            }
        }
    </div>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control"/>
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
}


@code {
    private HubConnection? hubConnection;
    private List<(string, string)> messages = new();
    private string username = string.Empty;
    private string message = string.Empty;
    private ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>("GetThatMessageDude", (user,message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : ": ")}{message}";
            messages.Add((user, msg));
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection != null)
        {
            // Sends data to signalr hub
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }

    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
